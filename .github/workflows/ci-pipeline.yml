name: CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '18'

jobs:
  # Stage 1: Fast validation (runs first)
  validate-format:
    name: "🔍 Validate Branch & Commit Format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml

      - name: Validate branch and commit format
        run: |
          echo "🔍 Starting validation based on semantic release configuration..."
          echo "📋 Checking pyproject.toml for allowed tags..."
          python .github/scripts/validate_format.py
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GITHUB_SHA: ${{ github.sha }}

      - name: Validation Success
        if: success()
        run: |
          echo "✅ All validation checks passed!"
          echo "🎉 Branch name and commit messages follow the required format."

  # Stage 2: Code quality (parallel, after validation)
  lint-python:
    name: "🐍 Lint Python Code"
    runs-on: ubuntu-latest
    needs: validate-format  # Wait for validation to complete
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run Python linting
        run: |
          echo "🔍 Checking Python code style..."
          echo "🐍 Running flake8..."
          flake8 backend/ --max-line-length=120 --count --statistics
          echo "🐍 Running black..."
          black --check backend/ --diff
          echo "🐍 Running isort..."
          isort --check-only backend/ --diff

  lint-frontend:
    name: "⚛️ Lint Frontend Code"
    runs-on: ubuntu-latest
    needs: validate-format  # Wait for validation to complete
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend
          npm i

      - name: Run frontend linting
        run: |
          cd frontend
          echo "🔍 Checking frontend code style..."
          npm run lint

  # Stage 3: Testing (parallel, after linting)
  test-backend:
    name: "🧪 Backend Tests"
    runs-on: ubuntu-latest
    needs: [lint-python]  # Wait for Python linting
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run backend tests
        run: |
          echo "🧪 Running backend tests..."
          pytest
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb

  test-frontend:
    name: "🧪 Frontend Tests"
    runs-on: ubuntu-latest
    needs: [lint-frontend]  # Wait for frontend linting
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend
          npm i

      - name: Run frontend tests
        run: |
          cd frontend
          echo "🧪 Running frontend tests..."
          npm test -- --coverage --watchAll=false

  # Stage 4: Final summary (always runs)
  pipeline-summary:
    name: "📊 Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [validate-format, lint-python, lint-frontend, test-backend, test-frontend]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "📊 CI Pipeline Execution Summary"
          echo "================================="
          echo "🔍 Format Validation: ${{ needs.validate-format.result }}"
          echo "🐍 Python Linting: ${{ needs.lint-python.result }}"
          echo "⚛️ Frontend Linting: ${{ needs.lint-frontend.result }}"
          echo "🧪 Backend Tests: ${{ needs.test-backend.result }}"
          echo "🧪 Frontend Tests: ${{ needs.test-frontend.result }}"
          
          # Calculate overall status
          if [[ "${{ needs.validate-format.result }}" == "success" && 
                "${{ needs.lint-python.result }}" == "success" && 
                "${{ needs.lint-frontend.result }}" == "success" && 
                "${{ needs.test-backend.result }}" == "success" && 
                "${{ needs.test-frontend.result }}" == "success" ]]; then
            echo ""
            echo "🎉 All pipeline stages completed successfully!"
            echo "✅ Code is ready for deployment!"
          else
            echo ""
            echo "❌ Some pipeline stages failed"
            echo "Please check the failed jobs above"
            exit 1
          fi